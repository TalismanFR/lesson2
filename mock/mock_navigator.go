// Code generated by MockGen. DO NOT EDIT.
// Source: ./distance/navigator/infra/geocoding.go

// Package mock is a generated GoMock package.
package mock

import (
	infra "lesson2/distance/navigator/infra"
	point "lesson2/distance/point"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGeocoding is a mock of Geocoding interface.
type MockGeocoding struct {
	ctrl     *gomock.Controller
	recorder *MockGeocodingMockRecorder
}

// MockGeocodingMockRecorder is the mock recorder for MockGeocoding.
type MockGeocodingMockRecorder struct {
	mock *MockGeocoding
}

// NewMockGeocoding creates a new mock instance.
func NewMockGeocoding(ctrl *gomock.Controller) *MockGeocoding {
	mock := &MockGeocoding{ctrl: ctrl}
	mock.recorder = &MockGeocodingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeocoding) EXPECT() *MockGeocodingMockRecorder {
	return m.recorder
}

// Geocode mocks base method.
func (m *MockGeocoding) Geocode(address string) (point.Point2d, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Geocode", address)
	ret0, _ := ret[0].(point.Point2d)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Geocode indicates an expected call of Geocode.
func (mr *MockGeocodingMockRecorder) Geocode(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Geocode", reflect.TypeOf((*MockGeocoding)(nil).Geocode), address)
}

// ReverseGeocode mocks base method.
func (m *MockGeocoding) ReverseGeocode(point point.Point2d) (infra.GeocodeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseGeocode", point)
	ret0, _ := ret[0].(infra.GeocodeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseGeocode indicates an expected call of ReverseGeocode.
func (mr *MockGeocodingMockRecorder) ReverseGeocode(point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseGeocode", reflect.TypeOf((*MockGeocoding)(nil).ReverseGeocode), point)
}
